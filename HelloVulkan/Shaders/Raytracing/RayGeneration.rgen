#version 460
#extension GL_EXT_ray_tracing : enable

#include <Raytracing/Header/Random.glsl>
#include <Raytracing/Header/RayPayload.glsl>
#include <Raytracing/Header/RaytracingUBO.glsl>

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = 3) uniform RTUBO { RaytracingUBO ubo; };

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

const float T_MIN = 0.001;
const float T_MAX = 10000.0;

void main()
{
	//uint rngState = uint(uint(gl_LaunchIDEXT.x) * uint(1973) + uint(gl_LaunchIDEXT.y) * uint(9277) + uint(ubo.currentSampleCount) * uint(26699)) | uint(1);
	uint rngState = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), ubo.currentSampleCount);
	rayPayload.randomSeed = rngState;

	vec3 color = vec3(0.0, 0.0, 0.0);

	for (uint i = 0; i < ubo.sampleCountPerFrame; i++)
	{
		vec4 origin = ubo.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);

		vec2 jitter = vec2(RandomFloat01(rngState), RandomFloat01(rngState)) - 0.5;
		vec4 target = ubo.projInverse * vec4((gl_LaunchIDEXT.xy + jitter) / gl_LaunchSizeEXT.xy * 2.0 - 1.0, 0.0, 1.0);
		vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0.0);

		vec3 sampleColor = vec3(1.0);

		for (uint j = 0; j <= ubo.rayBounceCount; j++)
		{
			// Cannot find a light source
			if (j == ubo.rayBounceCount)
			{
				sampleColor = vec3(0.0);
				break;
			}

			traceRayEXT(tlas, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin.xyz, T_MIN, direction.xyz, T_MAX, 0);
			sampleColor *= rayPayload.color;

			// Terminate if the ray didn't hit anything or did not scatter
			if (rayPayload.distance < 0 || !rayPayload.doScatter)
			{
				break;
			}

			// New origin and direction from last hit point
			origin = origin + rayPayload.distance * direction;
			direction = vec4(rayPayload.scatterDir, 0.0);
		}

		color += sampleColor;
	}

	// Get color from accumulator
	vec3 lastFrameColor = vec3(0.0);
	if (ubo.frame > 0 )
	{
		lastFrameColor = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
	};

	// Store accumulator
	vec3 accumulatedColor = lastFrameColor + color;
	imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));

	// Display color
	color = accumulatedColor / ubo.currentSampleCount;

	// Gamma correction
	color = pow(color, vec3(1.0 / 2.2));

	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0));
}
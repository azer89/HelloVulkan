#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require

#include <Bindless/VertexData.glsl>
#include <Bindless/MeshData.glsl>
#include <Bindless/BDA.glsl>

hitAttributeEXT vec3 attribs;

layout(set = 0, binding = 4) uniform BDABlock { BDA bda; }; // Buffer device address
layout(set = 0, binding = 6) uniform sampler2D pbrTextures[] ;

void main()
{
	MeshData mData = bda.meshReference.meshes[gl_GeometryIndexEXT];
	uint vOffset = mData.vertexOffset;
	uint iOffset = mData.indexOffset;

	ivec3 index = ivec3(
		bda.indexReference.indices[(3 * gl_PrimitiveID) + iOffset] + vOffset,
		bda.indexReference.indices[(3 * gl_PrimitiveID) + iOffset + 1] + vOffset,
		bda.indexReference.indices[(3 * gl_PrimitiveID) + iOffset + 2] + vOffset);

	VertexData v0 = bda.vertexReference.vertices[index.x];
	VertexData v1 = bda.vertexReference.vertices[index.y];
	VertexData v2 = bda.vertexReference.vertices[index.z];

	vec3 bary = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);

	vec2 uv =
		vec2(v0.uvX, v0.uvY) * bary.x +
		vec2(v1.uvX, v1.uvY) * bary.y +
		vec2(v2.uvX, v2.uvY) * bary.z;

	// Check based on albedo texture
	vec4 albedo4 = texture(pbrTextures[nonuniformEXT(mData.albedo)], uv).rgba;
	if (albedo4.a < 0.5)
	{
		ignoreIntersectionEXT;
	}
}
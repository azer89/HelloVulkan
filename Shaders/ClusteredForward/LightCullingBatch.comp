#version 460 core

/*
Based on www.aortiz.me/2018/12/21/CG.html

Batched version of light culling for clustered forward shading.
This should be a wee bit faster than the brute force version.
*/

layout(local_size_x = 16, local_size_y = 9, local_size_z = 4) in;

#include <LightData.glsl>
#include <ClusteredForward//ClusterForwardHeader.glsl>

// Note that if the number of intersecting lights is greater than this limit,
// it'll cause a flickering artifact.
#define MAX_LIGHTS_PER_CLUSTER 150

shared LightData sharedLights[16 * 9 * 4] ;

// SSBO
layout(set = 0, binding = 0) readonly buffer Clusters
{
	AABB clusters[];
};

// SSBO
layout(set = 0, binding = 1) readonly buffer Lights 
{ 
	LightData lights[]; 
};

// SSBO 
layout(set = 0, binding = 2) buffer AtomicCounter
{
	uint globalIndex;
};

// SSBO
layout(set = 0, binding = 3) buffer LightCells
{
	LightCell lightCells[];
};

// SSBO (output)
layout(set = 0, binding = 4) buffer LightIndices
{
	uint lightIndices[];
};

// UBO
layout(set = 0, binding = 5) uniform ClusterForwardUBO
{
	mat4 cameraInverseProjection;
	mat4 cameraView;
	vec2 screenSize;
	float sliceScaling;
	float sliceBias;
	float cameraNear;
	float cameraFar;
	uint sliceCountX;
	uint sliceCountY;
	uint sliceCountZ;
}
ubo;

float SquaredDistancePointAABB(vec3 point, uint tile)
{
	AABB currentCell = clusters[tile];

	float sqDist = 0.0;
	for (uint i = 0; i < 3; ++i)
	{
		float v = point[i];
		if (v < currentCell.minPoint[i])
		{
			float diff = currentCell.minPoint[i] - v;
			sqDist += (diff * diff);
		}
		else if (v > currentCell.maxPoint[i])
		{
			float diff = currentCell.maxPoint[i] - v;
			sqDist += (diff * diff);
		}
	}

	return sqDist;
}

bool TestSphereAABB(uint lightIndex, uint tile)
{
	float lightRadius = sharedLights[lightIndex].radius;
	vec4 posWorld = sharedLights[lightIndex].position;
	vec4 posView = ubo.cameraView * posWorld;
	float squaredDistance = SquaredDistancePointAABB(posView.xyz, tile);
	return squaredDistance < (lightRadius * lightRadius);
}

void main()
{
	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	uint lightCount = lights.length();
	uint numBatches = (lightCount + threadCount - 1) / threadCount;

	uint tileIndex = gl_LocalInvocationIndex +
		gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * gl_WorkGroupID.z;

	uint lightIter = 0;
	uint visibleLightIndices[MAX_LIGHTS_PER_CLUSTER];

	for (uint batch = 0; batch < numBatches; ++batch)
	{
		uint lightIndex = batch * threadCount + gl_LocalInvocationIndex;

		// This if statement prevents index out of bound
		// TODO Look for a better alternative
		if (lightIndex < lightCount)
		{
			sharedLights[gl_LocalInvocationIndex] = lights[lightIndex];
		}

		barrier();

		for (uint i = 0; i < threadCount; ++i)
		{
			if (TestSphereAABB(i, tileIndex))
			{
				visibleLightIndices[lightIter] = batch * threadCount + i;
				lightIter++;
			}
		}
	}

	barrier();

	uint offset = atomicAdd(globalIndex, lightIter);

	for (uint i = 0; i < lightIter; ++i)
	{
		lightIndices[offset + i] = visibleLightIndices[i];
	}

	lightCells[tileIndex].offset = offset;
	lightCells[tileIndex].count  = lightIter;
}
#version 460
#extension GL_EXT_ray_tracing : enable

#include <Raytracing/Random.glsl>

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 0, binding = 2) uniform CameraProperties
{
	mat4 projInverse;
	mat4 viewInverse;
	uint frame;
}
cam;

layout(location = 0) rayPayloadEXT vec3 hitValue;
//layout(location = 3) rayPayloadEXT uint payloadSeed;

void main()
{
	uint seed = TEA(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, cam.frame);
	float r1 = RND(seed);
	float r2 = RND(seed);

	vec2 subpixelJitter = cam.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

	float tmin = 0.001;
	float tmax = 10000.0;

	hitValue = vec3(0.0);
	vec3 hitValues = vec3(0);

	const int samples = 4;
	for (int smpl = 0; smpl < samples; smpl++)
	{
		//payloadSeed = TEA(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, cam.frame);
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		hitValues += hitValue;
	}

	vec3 hitVal = hitValues / float(samples);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));

	if (cam.frame > 0)
	{
		float a = 1.0f / float(cam.frame + 1);
		vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitVal, a), 1.f));
	}
	else
	{
		// First frame, replace the value in the buffer
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitVal, 1.f));
	}
}

#version 460
#extension GL_EXT_ray_tracing : enable

#include <Raytracing/Random.glsl>
#include <Raytracing/RayPayload.glsl>
#include <Raytracing/RaytracingUBO.glsl>

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = 3) uniform RTUBO { RaytracingUBO ubo; };

layout(location = 0) rayPayloadEXT vec3 hitValue;
layout(location = 1) rayPayloadEXT RayPayload rayPayload;

const float RANDOM_RADIUS = 1.0;
const float T_MIN = 0.001;
const float T_MAX = 10000.0;

void main()
{
	uint rngState = uint(uint(gl_LaunchIDEXT.x) * uint(1973) + uint(gl_LaunchIDEXT.y) * uint(9277) + uint(ubo.currentSampleCount) * uint(26699)) | uint(1);
	rayPayload.randomSeed = rngState;

	vec3 color = vec3(0.0, 0.0, 0.0);

	for (uint i = 0; i < ubo.sampleCountPerFrame; i++)
	{
		vec4 origin = ubo.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);

		vec2 jitter = vec2(RandomFloat01(rngState), RandomFloat01(rngState)) - 0.5;
		vec4 target = ubo.projInverse * vec4((gl_LaunchIDEXT.xy + jitter) / gl_LaunchSizeEXT.xy * 2.0 - 1.0, 0.0, 1.0);
		vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0.0);

		vec3 sampleColor = vec3(1.0);

		for (uint j = 0; j < ubo.rayBounceCount; j++)
		{
			traceRayEXT(tlas, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin.xyz, T_MIN, direction.xyz, T_MAX, 0);
			sampleColor *= rayPayload.color;

			// End of trace if the ray didn't hit anything or is no longer supposed to scatter
			if (rayPayload.distance < 0 || !rayPayload.doScatter)
			{
				break;
			}

			// New origin and direction from last hit point
			origin = origin + rayPayload.distance * direction;
			direction = vec4(rayPayload.scatterDir, 0.0);
		}

		color += sampleColor;
	}

	// Check if we need to fetch values from the last frame
	vec3 lastFrameColor = vec3(0.0);
	if (ubo.frame > 0 )
	{
		lastFrameColor = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
	};

	// Add current frame's color to accumulated color and store
	vec3 accumulatedColor = lastFrameColor + color;
	imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));

	// Get display color
	color = accumulatedColor / ubo.currentSampleCount;

	// Gamma correction
	color = pow(color, vec3(1.0 / 2.2));

	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0));

	// Old code
	/*uint seed = TEA(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, ubo.frame);
	vec2 random2 = vec2(RND(seed), RND(seed)) * RANDOM_RADIUS;

	vec2 subpixelJitter = ubo.frame == 0 ? vec2(0.5f, 0.5f) : random2;
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = ubo.viewInverse * vec4(0, 0, 0, 1);
	vec4 target = ubo.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0);

	hitValue = vec3(0.0);

	traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, T_MIN, direction.xyz, T_MAX, 0);

	if (ubo.frame > 0)
	{
		float a = 1.0f / float(ubo.frame + 1);
		vec3 oldColor = imageLoad(storageImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitValue, a), 1.f));
	}
	else
	{
		// First frame, replace the value in the buffer
		imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.f));
	}*/
}

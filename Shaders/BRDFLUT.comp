#version 460 core

/*
Shader to generate BRDF Lookup Table.
Based on 
[1] https://learnopengl.com/PBR/IBL/Specular-IBL
[2] https://github.com/SaschaWillems/Vulkan-glTF-PBR
*/

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer SRC { float data[]; } src;
layout (set = 0, binding = 1) buffer DST { float data[]; } dst;

// TODO Use push constants instead of hardcoded const
const uint BRDF_W = 256;
const uint BRDF_H = 256;
const uint SAMPLE_COUNT = 1024u;

#include <PBRHeader.frag>
#include <Hammersley.frag>

vec2 BRDF(float NoV, float roughness)
{
	// Normal always points along z-axis
	const vec3 N = vec3(0.0, 0.0, 1.0);
	vec3 V = vec3(sqrt(1.0 - NoV * NoV), 0.0, NoV);

	vec2 LUT = vec2(0.0);
	for (uint i = 0u; i < SAMPLE_COUNT; i++)
	{
		vec2 Xi = Hammersley(i, SAMPLE_COUNT);
		vec3 H = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L = 2.0 * dot(V, H) * H - V;

		float dotNL = max(dot(N, L), 0.0);

		if (dotNL > 0.0)
		{
			float dotNV = max(dot(N, V), 0.0);
			float dotVH = max(dot(V, H), 0.0);
			float dotNH = max(dot(H, N), 0.0);

			float G = GeometrySchlickGGX_IBL(dotNL, dotNV, roughness);
			float G_Vis = (G * dotVH) / (dotNH * dotNV);
			float Fc = pow(1.0 - dotVH, 5.0);
			LUT += vec2(
				(1.0 - Fc) * G_Vis, // NoV
				Fc * G_Vis); // roughness
		}
	}
	return LUT / float(SAMPLE_COUNT);
}

void main() 
{
	vec2 uv;
	uv.x = (float(gl_GlobalInvocationID.x) + 0.5) / float(BRDF_W);
	uv.y = (float(gl_GlobalInvocationID.y) + 0.5) / float(BRDF_H);

	vec2 v = BRDF(uv.x, 1.0 - uv.y);

	uint offset = gl_GlobalInvocationID.y * BRDF_W + gl_GlobalInvocationID.x;

	dst.data[offset * 2 + 0] = v.x;
	dst.data[offset * 2 + 1] = v.y;
}